{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import libraries\n",
    "import time, scipy\n",
    "import matplotlib.pyplot as plt\n",
    "from keras import models\n",
    "from keras import layers\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense, Flatten, MaxPooling2D, Activation, Conv2D, Dropout\n",
    "from sklearn.metrics import recall_score\n",
    "from tensorflow.keras import layers\n",
    "import pickle\n",
    "import helpers as th"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "X = pickle.load(open('Pickles/X_val.pickle', 'rb'))\n",
    "y = pickle.load(open('Pickles/y_val.pickle', 'rb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/50\n",
      "232/232 [==============================] - 36s 148ms/step - loss: 0.9881 - accuracy: 0.4796 - val_loss: 0.9498 - val_accuracy: 0.5127\n",
      "Epoch 2/50\n",
      "232/232 [==============================] - 7s 32ms/step - loss: 0.9591 - accuracy: 0.5130 - val_loss: 0.9586 - val_accuracy: 0.5273\n",
      "Epoch 3/50\n",
      "232/232 [==============================] - 4s 18ms/step - loss: 0.9452 - accuracy: 0.5354 - val_loss: 1.2047 - val_accuracy: 0.3889\n",
      "Epoch 4/50\n",
      "232/232 [==============================] - 3s 14ms/step - loss: 0.9380 - accuracy: 0.5541 - val_loss: 0.9192 - val_accuracy: 0.5603\n",
      "Epoch 5/50\n",
      "232/232 [==============================] - 3s 12ms/step - loss: 0.9315 - accuracy: 0.5608 - val_loss: 1.0348 - val_accuracy: 0.4413\n",
      "Epoch 6/50\n",
      "232/232 [==============================] - 5s 21ms/step - loss: 0.9238 - accuracy: 0.5686 - val_loss: 1.0036 - val_accuracy: 0.5495\n",
      "Epoch 7/50\n",
      "232/232 [==============================] - 9s 40ms/step - loss: 0.9166 - accuracy: 0.5733 - val_loss: 1.0213 - val_accuracy: 0.5441\n",
      "Epoch 8/50\n",
      "232/232 [==============================] - 6s 24ms/step - loss: 0.9085 - accuracy: 0.5817 - val_loss: 1.0506 - val_accuracy: 0.4045\n",
      "Epoch 9/50\n",
      "232/232 [==============================] - 4s 17ms/step - loss: 0.9063 - accuracy: 0.5859 - val_loss: 1.0114 - val_accuracy: 0.5165\n",
      "Epoch 10/50\n",
      "232/232 [==============================] - 5s 21ms/step - loss: 0.8936 - accuracy: 0.5926 - val_loss: 1.0699 - val_accuracy: 0.5343\n",
      "Epoch 11/50\n",
      "232/232 [==============================] - 4s 19ms/step - loss: 0.8890 - accuracy: 0.5952 - val_loss: 0.9568 - val_accuracy: 0.5549\n",
      "Epoch 12/50\n",
      "232/232 [==============================] - 9s 38ms/step - loss: 0.8891 - accuracy: 0.5971 - val_loss: 1.0188 - val_accuracy: 0.4776\n",
      "Epoch 13/50\n",
      "232/232 [==============================] - 5s 24ms/step - loss: 0.8841 - accuracy: 0.6048 - val_loss: 0.9359 - val_accuracy: 0.5700\n",
      "Epoch 14/50\n",
      "232/232 [==============================] - 8s 33ms/step - loss: 0.8739 - accuracy: 0.6097 - val_loss: 1.1033 - val_accuracy: 0.5327\n",
      "Epoch 15/50\n",
      "232/232 [==============================] - 3s 14ms/step - loss: 0.8696 - accuracy: 0.6124 - val_loss: 1.0474 - val_accuracy: 0.5349\n",
      "Epoch 16/50\n",
      "232/232 [==============================] - 3s 13ms/step - loss: 0.8671 - accuracy: 0.6094 - val_loss: 0.8947 - val_accuracy: 0.5928\n",
      "Epoch 17/50\n",
      "232/232 [==============================] - 3s 13ms/step - loss: 0.8600 - accuracy: 0.6188 - val_loss: 1.0233 - val_accuracy: 0.4294\n",
      "Epoch 18/50\n",
      "232/232 [==============================] - 3s 13ms/step - loss: 0.8588 - accuracy: 0.6163 - val_loss: 1.8160 - val_accuracy: 0.3764\n",
      "Epoch 19/50\n",
      "232/232 [==============================] - 3s 12ms/step - loss: 0.8751 - accuracy: 0.6044 - val_loss: 0.9724 - val_accuracy: 0.5398\n",
      "Epoch 20/50\n",
      "232/232 [==============================] - 3s 12ms/step - loss: 0.8451 - accuracy: 0.6324 - val_loss: 1.0787 - val_accuracy: 0.5717\n",
      "Epoch 21/50\n",
      "232/232 [==============================] - 4s 16ms/step - loss: 0.8456 - accuracy: 0.6286 - val_loss: 1.4666 - val_accuracy: 0.2071\n",
      "Epoch 22/50\n",
      "232/232 [==============================] - 4s 19ms/step - loss: 0.8484 - accuracy: 0.6206 - val_loss: 0.9033 - val_accuracy: 0.5819\n",
      "Epoch 23/50\n",
      "232/232 [==============================] - 3s 15ms/step - loss: 0.8344 - accuracy: 0.6383 - val_loss: 0.9421 - val_accuracy: 0.5549\n",
      "Epoch 24/50\n",
      "232/232 [==============================] - 4s 19ms/step - loss: 0.8291 - accuracy: 0.6410 - val_loss: 0.9137 - val_accuracy: 0.5928\n",
      "Epoch 25/50\n",
      "232/232 [==============================] - 3s 15ms/step - loss: 0.8320 - accuracy: 0.6357 - val_loss: 0.9437 - val_accuracy: 0.5884\n",
      "Epoch 26/50\n",
      "232/232 [==============================] - 7s 32ms/step - loss: 0.8309 - accuracy: 0.6359 - val_loss: 0.9893 - val_accuracy: 0.5181\n",
      "Epoch 27/50\n",
      "232/232 [==============================] - 5s 21ms/step - loss: 0.8185 - accuracy: 0.6459 - val_loss: 0.9368 - val_accuracy: 0.5398\n",
      "Epoch 28/50\n",
      "232/232 [==============================] - 5s 20ms/step - loss: 0.8227 - accuracy: 0.6403 - val_loss: 1.1578 - val_accuracy: 0.5111\n",
      "Epoch 29/50\n",
      "232/232 [==============================] - 3s 13ms/step - loss: 0.8196 - accuracy: 0.6455 - val_loss: 1.0050 - val_accuracy: 0.5462\n",
      "Epoch 30/50\n",
      "232/232 [==============================] - 3s 14ms/step - loss: 0.8178 - accuracy: 0.6499 - val_loss: 1.3229 - val_accuracy: 0.3094\n",
      "Epoch 31/50\n",
      "232/232 [==============================] - 4s 19ms/step - loss: 0.8103 - accuracy: 0.6532 - val_loss: 1.2087 - val_accuracy: 0.3288\n",
      "Epoch 32/50\n",
      "232/232 [==============================] - 4s 16ms/step - loss: 0.8061 - accuracy: 0.6501 - val_loss: 1.8745 - val_accuracy: 0.3905\n",
      "Epoch 33/50\n",
      "232/232 [==============================] - 3s 14ms/step - loss: 0.8087 - accuracy: 0.6522 - val_loss: 0.9763 - val_accuracy: 0.5398\n",
      "Epoch 34/50\n",
      "232/232 [==============================] - 5s 20ms/step - loss: 0.8056 - accuracy: 0.6531 - val_loss: 1.7304 - val_accuracy: 0.2212\n",
      "Epoch 35/50\n",
      "232/232 [==============================] - 3s 15ms/step - loss: 0.8480 - accuracy: 0.6326 - val_loss: 1.2095 - val_accuracy: 0.4024\n",
      "Epoch 36/50\n",
      "232/232 [==============================] - 4s 19ms/step - loss: 0.8290 - accuracy: 0.6379 - val_loss: 1.3013 - val_accuracy: 0.4105\n",
      "Epoch 37/50\n",
      "232/232 [==============================] - 3s 15ms/step - loss: 0.8163 - accuracy: 0.6447 - val_loss: 0.9726 - val_accuracy: 0.5024\n",
      "Epoch 38/50\n",
      "232/232 [==============================] - 4s 18ms/step - loss: 0.8041 - accuracy: 0.6502 - val_loss: 0.9231 - val_accuracy: 0.5749\n",
      "Epoch 39/50\n",
      "232/232 [==============================] - 3s 13ms/step - loss: 0.7925 - accuracy: 0.6609 - val_loss: 1.1457 - val_accuracy: 0.4337\n",
      "Epoch 40/50\n",
      "232/232 [==============================] - 3s 14ms/step - loss: 0.7920 - accuracy: 0.6591 - val_loss: 2.2165 - val_accuracy: 0.1839\n",
      "Epoch 41/50\n",
      "232/232 [==============================] - 3s 12ms/step - loss: 0.8300 - accuracy: 0.6382 - val_loss: 1.5571 - val_accuracy: 0.4289\n",
      "Epoch 42/50\n",
      "232/232 [==============================] - 3s 13ms/step - loss: 0.8059 - accuracy: 0.6520 - val_loss: 1.5126 - val_accuracy: 0.4164\n",
      "Epoch 43/50\n",
      "232/232 [==============================] - 3s 12ms/step - loss: 0.8052 - accuracy: 0.6490 - val_loss: 0.9301 - val_accuracy: 0.6122\n",
      "Epoch 44/50\n",
      "232/232 [==============================] - 3s 15ms/step - loss: 0.7860 - accuracy: 0.6635 - val_loss: 1.9142 - val_accuracy: 0.4256\n",
      "Epoch 45/50\n",
      "232/232 [==============================] - 3s 14ms/step - loss: 0.7983 - accuracy: 0.6577 - val_loss: 0.9091 - val_accuracy: 0.6063\n",
      "Epoch 46/50\n",
      "232/232 [==============================] - 3s 13ms/step - loss: 0.7723 - accuracy: 0.6696 - val_loss: 0.9835 - val_accuracy: 0.5598\n",
      "Epoch 47/50\n",
      "232/232 [==============================] - 3s 14ms/step - loss: 0.7682 - accuracy: 0.6746 - val_loss: 1.0126 - val_accuracy: 0.5700\n",
      "Epoch 48/50\n",
      "232/232 [==============================] - 3s 13ms/step - loss: 0.7651 - accuracy: 0.6748 - val_loss: 0.9169 - val_accuracy: 0.5727\n",
      "Epoch 49/50\n",
      "232/232 [==============================] - 3s 13ms/step - loss: 0.7610 - accuracy: 0.6778 - val_loss: 1.0913 - val_accuracy: 0.4478\n",
      "Epoch 50/50\n",
      "232/232 [==============================] - 3s 13ms/step - loss: 0.7668 - accuracy: 0.6739 - val_loss: 0.9793 - val_accuracy: 0.5630\n"
     ]
    }
   ],
   "source": [
    "# First simple model\n",
    "model = models.Sequential()\n",
    "model.add(Flatten()) # Transform features into a single column\n",
    "model.add(layers.Dense(20, activation='relu', input_shape=X.shape[1:])) # First hidden layer\n",
    "model.add(layers.Dense(15, activation='relu')) # Second hidden layer\n",
    "model.add(layers.Dense(10, activation='relu')) # Third hidden layer\n",
    "model.add(layers.Dense(3, activation='softmax')) # Output layer, 1 node for each class\n",
    "\n",
    "opt = SGD(learning_rate=0.01)\n",
    "model.compile(loss = 'sparse_categorical_crossentropy', \n",
    "              optimizer = opt, \n",
    "              metrics=['accuracy']\n",
    ")\n",
    "\n",
    "model_score = model.fit(X, \n",
    "                        y, \n",
    "                        epochs=50,\n",
    "                        validation_split=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "th.plot_model_train_val_accuracy_loss(model_score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_augmentation = Sequential([\n",
    "  layers.experimental.preprocessing.RandomFlip('horizontal_and_vertical'),\n",
    "  layers.experimental.preprocessing.RandomRotation(0.2),\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "th.plot_model_train_val_accuracy_loss(model2_score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/50\n",
      " 11/232 [>.............................] - ETA: 16:29 - loss: 1.3797 - accuracy: 0.4176"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-35-f20ebfc30c14>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m model3_score = model3.fit(X, \n\u001b[0m\u001b[1;32m     16\u001b[0m                           \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m                           \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m50\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1182\u001b[0m                 _r=1):\n\u001b[1;32m   1183\u001b[0m               \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_train_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1184\u001b[0;31m               \u001b[0mtmp_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1185\u001b[0m               \u001b[0;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1186\u001b[0m                 \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    883\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    884\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0mOptionalXlaContext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jit_compile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 885\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    886\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    887\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    915\u001b[0m       \u001b[0;31m# In this case we have created variables on the first call, so we run the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    916\u001b[0m       \u001b[0;31m# defunned version which is guaranteed to never create variables.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 917\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateless_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=not-callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    918\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateful_fn\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    919\u001b[0m       \u001b[0;31m# Release the lock early so that multiple threads can perform the call\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   3037\u001b[0m       (graph_function,\n\u001b[1;32m   3038\u001b[0m        filtered_flat_args) = self._maybe_define_function(args, kwargs)\n\u001b[0;32m-> 3039\u001b[0;31m     return graph_function._call_flat(\n\u001b[0m\u001b[1;32m   3040\u001b[0m         filtered_flat_args, captured_inputs=graph_function.captured_inputs)  # pylint: disable=protected-access\n\u001b[1;32m   3041\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1961\u001b[0m         and executing_eagerly):\n\u001b[1;32m   1962\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1963\u001b[0;31m       return self._build_call_outputs(self._inference_function.call(\n\u001b[0m\u001b[1;32m   1964\u001b[0m           ctx, args, cancellation_manager=cancellation_manager))\n\u001b[1;32m   1965\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    589\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0m_InterpolateFunctionError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    590\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcancellation_manager\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 591\u001b[0;31m           outputs = execute.execute(\n\u001b[0m\u001b[1;32m    592\u001b[0m               \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msignature\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    593\u001b[0m               \u001b[0mnum_outputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_num_outputs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     57\u001b[0m   \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     58\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 59\u001b[0;31m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0m\u001b[1;32m     60\u001b[0m                                         inputs, attrs, num_outputs)\n\u001b[1;32m     61\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "model3 = Sequential([\n",
    "  data_augmentation,\n",
    "  layers.Conv2D(filters=48, kernel_size=3, activation='relu', input_shape=X.shape[1:]),\n",
    "  layers.MaxPooling2D(pool_size=2, strides=2)\n",
    "])\n",
    "model3.add(layers.Flatten())\n",
    "model3.add(layers.Dense(128, activation='relu'))\n",
    "model3.add(layers.Dense(64, activation='relu'))\n",
    "model3.add(layers.Dense(3, activation='softmax'))\n",
    "\n",
    "# finally compile and train the cnn\n",
    "model3.compile(loss = 'sparse_categorical_crossentropy', \n",
    "               optimizer = opt, \n",
    "               metrics=['accuracy']\n",
    ")\n",
    "\n",
    "\n",
    "model3_score = model3.fit(X, \n",
    "                          y, \n",
    "                          epochs=50,\n",
    "                          validation_split=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "th.plot_model_train_val_accuracy_loss(model3_score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/50\n"
     ]
    },
    {
     "ename": "InvalidArgumentError",
     "evalue": " logits and labels must have the same first dimension, got logits shape [2097152,3] and labels shape [32]\n\t [[node sparse_categorical_crossentropy/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits (defined at <ipython-input-42-a199f79afb59>:20) ]] [Op:__inference_train_function_107500]\n\nFunction call stack:\ntrain_function\n",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mInvalidArgumentError\u001b[0m                      Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-42-a199f79afb59>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     18\u001b[0m )\n\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m model4_score = model4.fit(X, \n\u001b[0m\u001b[1;32m     21\u001b[0m                           \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m                           \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m50\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1182\u001b[0m                 _r=1):\n\u001b[1;32m   1183\u001b[0m               \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_train_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1184\u001b[0;31m               \u001b[0mtmp_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1185\u001b[0m               \u001b[0;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1186\u001b[0m                 \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    883\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    884\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0mOptionalXlaContext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jit_compile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 885\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    886\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    887\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    948\u001b[0m         \u001b[0;31m# Lifting succeeded, so variables are initialized and we can run the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    949\u001b[0m         \u001b[0;31m# stateless function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 950\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateless_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    951\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    952\u001b[0m       \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfiltered_flat_args\u001b[0m \u001b[0;34m=\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m\\\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   3037\u001b[0m       (graph_function,\n\u001b[1;32m   3038\u001b[0m        filtered_flat_args) = self._maybe_define_function(args, kwargs)\n\u001b[0;32m-> 3039\u001b[0;31m     return graph_function._call_flat(\n\u001b[0m\u001b[1;32m   3040\u001b[0m         filtered_flat_args, captured_inputs=graph_function.captured_inputs)  # pylint: disable=protected-access\n\u001b[1;32m   3041\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1961\u001b[0m         and executing_eagerly):\n\u001b[1;32m   1962\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1963\u001b[0;31m       return self._build_call_outputs(self._inference_function.call(\n\u001b[0m\u001b[1;32m   1964\u001b[0m           ctx, args, cancellation_manager=cancellation_manager))\n\u001b[1;32m   1965\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    589\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0m_InterpolateFunctionError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    590\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcancellation_manager\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 591\u001b[0;31m           outputs = execute.execute(\n\u001b[0m\u001b[1;32m    592\u001b[0m               \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msignature\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    593\u001b[0m               \u001b[0mnum_outputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_num_outputs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     57\u001b[0m   \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     58\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 59\u001b[0;31m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0m\u001b[1;32m     60\u001b[0m                                         inputs, attrs, num_outputs)\n\u001b[1;32m     61\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mInvalidArgumentError\u001b[0m:  logits and labels must have the same first dimension, got logits shape [2097152,3] and labels shape [32]\n\t [[node sparse_categorical_crossentropy/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits (defined at <ipython-input-42-a199f79afb59>:20) ]] [Op:__inference_train_function_107500]\n\nFunction call stack:\ntrain_function\n"
     ]
    }
   ],
   "source": [
    "# Initialize model\n",
    "model4 = Sequential()\n",
    "\n",
    "# Input layer with dropout\n",
    "model4.add(layers.Dense(15, input_shape=X.shape[1:]))\n",
    "model4.add(layers.Dense(10, activation='relu')) # First hidden layer\n",
    "model4.add(layers.Dropout(0.3))\n",
    "model4.add(layers.Dense(10, activation='relu')) # Second hidden layer\n",
    "model4.add(layers.Dropout(0.3))\n",
    "model4.add(layers.Dense(10, activation='relu')) # Third hidden layer\n",
    "model4.add(layers.Dropout(0.3))\n",
    "# Output layer\n",
    "model4.add(layers.Dense(3, activation='linear'))\n",
    "\n",
    "model4.compile(loss = 'sparse_categorical_crossentropy', \n",
    "               optimizer = opt, \n",
    "               metrics=['accuracy']\n",
    ")\n",
    "\n",
    "model4_score = model4.fit(X, \n",
    "                          y, \n",
    "                          epochs=50, \n",
    "                          validation_split=0.2\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "th.plot_model_train_val_accuracy_loss(model4_score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "232/232 [==============================] - 40s 161ms/step - loss: 1.0359 - accuracy: 0.4824 - val_loss: 1.0072 - val_accuracy: 0.4857\n",
      "Epoch 2/10\n",
      "232/232 [==============================] - 27s 115ms/step - loss: 1.0042 - accuracy: 0.4824 - val_loss: 0.9908 - val_accuracy: 0.4857\n",
      "Epoch 3/10\n",
      "232/232 [==============================] - 24s 103ms/step - loss: 0.9960 - accuracy: 0.4824 - val_loss: 0.9849 - val_accuracy: 0.4857\n",
      "Epoch 4/10\n",
      "232/232 [==============================] - 24s 103ms/step - loss: 0.9933 - accuracy: 0.4824 - val_loss: 0.9827 - val_accuracy: 0.4857\n",
      "Epoch 5/10\n",
      "232/232 [==============================] - 21s 89ms/step - loss: 0.9924 - accuracy: 0.4824 - val_loss: 0.9819 - val_accuracy: 0.4857\n",
      "Epoch 6/10\n",
      "232/232 [==============================] - 21s 89ms/step - loss: 0.9921 - accuracy: 0.4824 - val_loss: 0.9813 - val_accuracy: 0.4857\n",
      "Epoch 7/10\n",
      "232/232 [==============================] - 21s 89ms/step - loss: 0.9919 - accuracy: 0.4824 - val_loss: 0.9811 - val_accuracy: 0.4857\n",
      "Epoch 8/10\n",
      "232/232 [==============================] - 24s 103ms/step - loss: 0.9918 - accuracy: 0.4824 - val_loss: 0.9809 - val_accuracy: 0.4857\n",
      "Epoch 9/10\n",
      "232/232 [==============================] - 20s 87ms/step - loss: 0.9919 - accuracy: 0.4824 - val_loss: 0.9808 - val_accuracy: 0.4857\n",
      "Epoch 10/10\n",
      "232/232 [==============================] - 20s 87ms/step - loss: 0.9918 - accuracy: 0.4824 - val_loss: 0.9808 - val_accuracy: 0.4857\n"
     ]
    }
   ],
   "source": [
    "model5 = Sequential([\n",
    "  data_augmentation])\n",
    "model5.add(Flatten())\n",
    "\n",
    "model5.add(layers.Dense(128, activation='softmax'))\n",
    "model5.add(layers.Dense(120, activation='softmax'))\n",
    "model5.add(layers.Dense(90, activation='softmax' ))\n",
    "model5.add(layers.Dense(84, activation='softmax'))\n",
    "model5.add(layers.Dense(72, activation='softmax'))\n",
    "model5.add(layers.Dense(64, activation='softmax'))\n",
    "model5.add(layers.Dense(50, activation='softmax'))\n",
    "model5.add(layers.Dense(30, activation='softmax'))\n",
    "model5.add(layers.Dense(15, activation='softmax'))\n",
    "model5.add(layers.Dense(8, activation='softmax'))\n",
    "model5.add(layers.Dense(3, activation='softmax'))\n",
    "\n",
    "# Compile and train CNN\n",
    "model5.compile(loss = 'sparse_categorical_crossentropy', \n",
    "               optimizer = opt, \n",
    "               metrics=['accuracy']\n",
    ")\n",
    "model5_score = model5.fit(X, \n",
    "                          y, \n",
    "                          epochs=10,\n",
    "                          validation_split=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "th.plot_model_train_val_accuracy_loss(model5_score)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Model 5 is not complex enough, hence the very low accuracy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/50\n",
      "232/232 [==============================] - 172s 731ms/step - loss: 0.9937 - accuracy: 0.4757 - val_loss: 0.9732 - val_accuracy: 0.5019\n",
      "Epoch 2/50\n",
      "232/232 [==============================] - 132s 568ms/step - loss: 0.9775 - accuracy: 0.4934 - val_loss: 0.9694 - val_accuracy: 0.4949\n",
      "Epoch 3/50\n",
      "232/232 [==============================] - 120s 517ms/step - loss: 0.9655 - accuracy: 0.5247 - val_loss: 0.9564 - val_accuracy: 0.5657\n",
      "Epoch 4/50\n",
      "232/232 [==============================] - 126s 541ms/step - loss: 0.9603 - accuracy: 0.5484 - val_loss: 1.0391 - val_accuracy: 0.5268\n",
      "Epoch 5/50\n",
      "232/232 [==============================] - 119s 512ms/step - loss: 0.9546 - accuracy: 0.5606 - val_loss: 0.9814 - val_accuracy: 0.5241\n",
      "Epoch 6/50\n",
      "232/232 [==============================] - 119s 515ms/step - loss: 0.9487 - accuracy: 0.5591 - val_loss: 0.9376 - val_accuracy: 0.5976\n",
      "Epoch 7/50\n",
      "232/232 [==============================] - 147s 636ms/step - loss: 0.9462 - accuracy: 0.5719 - val_loss: 0.9949 - val_accuracy: 0.5381\n",
      "Epoch 8/50\n",
      "232/232 [==============================] - 126s 545ms/step - loss: 0.9442 - accuracy: 0.5723 - val_loss: 0.9207 - val_accuracy: 0.5998\n",
      "Epoch 9/50\n",
      "232/232 [==============================] - 136s 585ms/step - loss: 0.9376 - accuracy: 0.5772 - val_loss: 0.9653 - val_accuracy: 0.5544\n",
      "Epoch 10/50\n",
      "232/232 [==============================] - 138s 595ms/step - loss: 0.9365 - accuracy: 0.5779 - val_loss: 0.9265 - val_accuracy: 0.5825\n",
      "Epoch 11/50\n",
      "232/232 [==============================] - 128s 552ms/step - loss: 0.9355 - accuracy: 0.5768 - val_loss: 1.1901 - val_accuracy: 0.3872\n",
      "Epoch 12/50\n",
      "232/232 [==============================] - 119s 512ms/step - loss: 0.9379 - accuracy: 0.5704 - val_loss: 1.1811 - val_accuracy: 0.3872\n",
      "Epoch 13/50\n",
      "232/232 [==============================] - 120s 516ms/step - loss: 0.9316 - accuracy: 0.5745 - val_loss: 0.9416 - val_accuracy: 0.5646\n",
      "Epoch 14/50\n",
      "232/232 [==============================] - 125s 540ms/step - loss: 0.9265 - accuracy: 0.5802 - val_loss: 0.9282 - val_accuracy: 0.5727\n",
      "Epoch 15/50\n",
      "232/232 [==============================] - 118s 510ms/step - loss: 0.9260 - accuracy: 0.5764 - val_loss: 1.0672 - val_accuracy: 0.3899\n",
      "Epoch 16/50\n",
      "232/232 [==============================] - 118s 508ms/step - loss: 0.9203 - accuracy: 0.5838 - val_loss: 1.1412 - val_accuracy: 0.5111\n",
      "Epoch 17/50\n",
      "232/232 [==============================] - 117s 505ms/step - loss: 0.9248 - accuracy: 0.5864 - val_loss: 0.9053 - val_accuracy: 0.5944\n",
      "Epoch 18/50\n",
      "232/232 [==============================] - 117s 504ms/step - loss: 0.9239 - accuracy: 0.5794 - val_loss: 0.9690 - val_accuracy: 0.4916\n",
      "Epoch 19/50\n",
      "232/232 [==============================] - 120s 516ms/step - loss: 0.9100 - accuracy: 0.5878 - val_loss: 0.8949 - val_accuracy: 0.6030\n",
      "Epoch 20/50\n",
      "232/232 [==============================] - 124s 536ms/step - loss: 0.9088 - accuracy: 0.5882 - val_loss: 1.0670 - val_accuracy: 0.4116\n",
      "Epoch 21/50\n",
      "232/232 [==============================] - 126s 545ms/step - loss: 0.9081 - accuracy: 0.5917 - val_loss: 0.9302 - val_accuracy: 0.5549\n",
      "Epoch 22/50\n",
      "232/232 [==============================] - 120s 516ms/step - loss: 0.9081 - accuracy: 0.5914 - val_loss: 0.9160 - val_accuracy: 0.5900\n",
      "Epoch 23/50\n",
      "232/232 [==============================] - 117s 505ms/step - loss: 0.9036 - accuracy: 0.5917 - val_loss: 1.0166 - val_accuracy: 0.4613\n",
      "Epoch 24/50\n",
      "232/232 [==============================] - 119s 513ms/step - loss: 0.8990 - accuracy: 0.5961 - val_loss: 0.9916 - val_accuracy: 0.5598\n",
      "Epoch 25/50\n",
      "232/232 [==============================] - 125s 538ms/step - loss: 0.8976 - accuracy: 0.6034 - val_loss: 0.8757 - val_accuracy: 0.6122\n",
      "Epoch 26/50\n",
      "232/232 [==============================] - 129s 557ms/step - loss: 0.8945 - accuracy: 0.6011 - val_loss: 0.8624 - val_accuracy: 0.6268\n",
      "Epoch 27/50\n",
      "232/232 [==============================] - 121s 522ms/step - loss: 0.8902 - accuracy: 0.6040 - val_loss: 0.8631 - val_accuracy: 0.6122\n",
      "Epoch 28/50\n",
      "232/232 [==============================] - 122s 526ms/step - loss: 0.8874 - accuracy: 0.6047 - val_loss: 0.9282 - val_accuracy: 0.5744\n",
      "Epoch 29/50\n",
      "232/232 [==============================] - 135s 583ms/step - loss: 0.8782 - accuracy: 0.6017 - val_loss: 0.8488 - val_accuracy: 0.6198\n",
      "Epoch 30/50\n",
      "232/232 [==============================] - 155s 668ms/step - loss: 0.8749 - accuracy: 0.6138 - val_loss: 0.9903 - val_accuracy: 0.5554\n",
      "Epoch 31/50\n",
      "232/232 [==============================] - 140s 601ms/step - loss: 0.8814 - accuracy: 0.6088 - val_loss: 0.9408 - val_accuracy: 0.5987\n",
      "Epoch 32/50\n",
      "232/232 [==============================] - 132s 570ms/step - loss: 0.8704 - accuracy: 0.6160 - val_loss: 0.8391 - val_accuracy: 0.6333\n",
      "Epoch 33/50\n",
      "232/232 [==============================] - 128s 551ms/step - loss: 0.8677 - accuracy: 0.6171 - val_loss: 1.4656 - val_accuracy: 0.3878\n",
      "Epoch 34/50\n",
      "232/232 [==============================] - 127s 549ms/step - loss: 0.8743 - accuracy: 0.6126 - val_loss: 1.7553 - val_accuracy: 0.3872\n",
      "Epoch 35/50\n",
      "232/232 [==============================] - 5084s 22s/step - loss: 0.8666 - accuracy: 0.6270 - val_loss: 0.8881 - val_accuracy: 0.6133\n",
      "Epoch 36/50\n",
      "232/232 [==============================] - 130s 561ms/step - loss: 0.8555 - accuracy: 0.6259 - val_loss: 0.9524 - val_accuracy: 0.5673\n",
      "Epoch 37/50\n",
      "232/232 [==============================] - 128s 553ms/step - loss: 0.8575 - accuracy: 0.6226 - val_loss: 0.8280 - val_accuracy: 0.6344\n",
      "Epoch 38/50\n",
      "232/232 [==============================] - 129s 555ms/step - loss: 0.8623 - accuracy: 0.6201 - val_loss: 0.9073 - val_accuracy: 0.6165\n",
      "Epoch 39/50\n",
      "232/232 [==============================] - 128s 550ms/step - loss: 0.8554 - accuracy: 0.6199 - val_loss: 0.8554 - val_accuracy: 0.6333\n",
      "Epoch 40/50\n",
      "232/232 [==============================] - 127s 546ms/step - loss: 0.8513 - accuracy: 0.6280 - val_loss: 0.8295 - val_accuracy: 0.6463\n",
      "Epoch 41/50\n",
      "232/232 [==============================] - 127s 547ms/step - loss: 0.8513 - accuracy: 0.6266 - val_loss: 0.9300 - val_accuracy: 0.5987\n",
      "Epoch 42/50\n",
      "232/232 [==============================] - 131s 563ms/step - loss: 0.8526 - accuracy: 0.6317 - val_loss: 0.9560 - val_accuracy: 0.5679\n",
      "Epoch 43/50\n",
      "232/232 [==============================] - 131s 566ms/step - loss: 0.8516 - accuracy: 0.6249 - val_loss: 0.8808 - val_accuracy: 0.6122\n",
      "Epoch 44/50\n",
      "232/232 [==============================] - 129s 558ms/step - loss: 0.8475 - accuracy: 0.6293 - val_loss: 0.8695 - val_accuracy: 0.6306\n",
      "Epoch 45/50\n",
      "232/232 [==============================] - 126s 544ms/step - loss: 0.8424 - accuracy: 0.6291 - val_loss: 0.9539 - val_accuracy: 0.5646\n",
      "Epoch 46/50\n",
      "232/232 [==============================] - 118s 507ms/step - loss: 0.8442 - accuracy: 0.6313 - val_loss: 1.1480 - val_accuracy: 0.5549\n",
      "Epoch 47/50\n",
      "232/232 [==============================] - 120s 516ms/step - loss: 0.8601 - accuracy: 0.6209 - val_loss: 1.1216 - val_accuracy: 0.4289\n",
      "Epoch 48/50\n",
      "232/232 [==============================] - 119s 513ms/step - loss: 0.8453 - accuracy: 0.6305 - val_loss: 0.8483 - val_accuracy: 0.6403\n",
      "Epoch 49/50\n",
      "232/232 [==============================] - 125s 540ms/step - loss: 0.8386 - accuracy: 0.6359 - val_loss: 0.8296 - val_accuracy: 0.6533\n",
      "Epoch 50/50\n",
      "232/232 [==============================] - 131s 563ms/step - loss: 0.8499 - accuracy: 0.6299 - val_loss: 0.8594 - val_accuracy: 0.6398\n"
     ]
    }
   ],
   "source": [
    "# Apply image augmentation\n",
    "model6 = Sequential([\n",
    "  data_augmentation,\n",
    "  layers.Conv2D(16, 3, padding='same', activation='relu'),\n",
    "  layers.MaxPooling2D()\n",
    "])\n",
    "\n",
    "model6.add(Flatten())\n",
    "model6.add(Dense(20, activation='relu', input_shape=X.shape[1:])) # First hidden layer\n",
    "model6.add(Dense(18, activation='relu')) # Second hidden layer\n",
    "model6.add(Dense(15, activation='relu')) # Third hidden layer\n",
    "model6.add(Dense(10, activation='relu')) # Fourth hidden layer\n",
    "model6.add(Dense(3, activation='softmax')) # Fifth hidden layer\n",
    "\n",
    "model6.compile(loss = 'sparse_categorical_crossentropy', \n",
    "               optimizer = opt, \n",
    "               metrics=['accuracy']\n",
    ")\n",
    "\n",
    "model6_score = model6.fit(X, \n",
    "                          y, \n",
    "                          epochs=50, \n",
    "                          validation_split=0.20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "th.plot_model_train_val_accuracy_loss(model6_score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python (learn-env)",
   "language": "python",
   "name": "learn-env"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
